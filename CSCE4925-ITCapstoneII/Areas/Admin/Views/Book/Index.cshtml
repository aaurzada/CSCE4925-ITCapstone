@model SQLSolutions.Areas.Admin.ViewModels.BookIndex

@{
    ViewBag.Title = "Index";
    if (Session["username"] == null || Session["isAdmin"].Equals(false))
    {
        Response.Redirect("~/Home/index");
    }

}

<h2> Books</h2>

@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@


@*search bar*@

<form method="GET">
    <div class="row" id="search-group">
        <div class="clearfix"></div>
        <div class="col-xs-8 col-md-6">
            <div class="input-group">
                @Html.TextBox("searchBook", ViewBag.currentFilter as string, new
                {
                    @class = "form-control",
                    @placeholder = "Search by Asset number, ISBN, Course number, Title, Author"
                })
                @*<input type="search" class="form-control" name="searchBook"/>*@
                <span class="input-group-btn">
                    <button class="btn btn-default" type="submit">
                     
                        Search
                    </button>
                </span>
            </div>
        </div>
        <a href="@Url.Action("Index")" class="btn btn-warning  col-md-1">
          
            Reset
        </a>
        @*add new book button*@
        <div class=" col-md-offset-3 col-xs-3 col-md-2">
            <a href="@Url.Action("Create")" class="btn btn-primary">
              
                Add New Book
            </a>
        </div>
    </div>

</form>

<div class="table-container">
    <table class="table">
        <tr>
            <th>
                @Html.DisplayName("AssetNum")
            </th>
            <th>
                @Html.DisplayName("ISBN")
            </th>
            <th>
                @Html.DisplayName("Title")
            </th>
            <th>
                @Html.DisplayName("Author")
            </th>
            <th>
                @Html.DisplayName("Course")
            </th>
            <th>
                @Html.DisplayName("Year")
            </th>
            <th>
                @Html.DisplayName("Edition")
            </th>
            <th>
                @Html.DisplayName("Required")
            </th>
            <th>
                @Html.DisplayName("Available")
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model.Books)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.AssetNum)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Isbn)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Author)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CourseSection)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Year)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Edition)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsRequired)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InStock)
                </td>
                <td>

                    <div class="btn-group">
                        <a href="@Url.Action("Edit", new {id = item.AssetNum})" class="btn btn-xs btn-primary">
                           
                            Edit
                        </a>

                        <a href="@Url.Action("Delete", new {id = item.AssetNum})" class="btn btn-xs btn-danger"
                           data-post="Are you sure you want to delete @item.Title for the @item.CourseSection course?">
                         
                            Delete
                        </a>
                    </div>
                </td>
            </tr>
        }

    </table>
</div>
@*check if no records were found then display message*@
@if (!Model.Books.Any())
{
    @Html.DisplayName("No records were found")
}



@Html.PagedListPager(Model.Books, page => Url.Action("Index",
    new { page, currentFilter = ViewBag.CurrentFilter }))
